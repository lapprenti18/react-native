{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport Animated from \"react-native-reanimated\";\nvar concat = Animated.concat;\nexport var string = function string(strings) {\n  for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    values[_key - 1] = arguments[_key];\n  }\n\n  if (values.length === 0) {\n    return concat(strings[0]);\n  }\n\n  var result = values.reduce(function (acc, v, idx) {\n    return [].concat(_toConsumableArray(acc), [strings[idx], v]);\n  }, []);\n  result.push(strings[strings.length - 1]);\n  return concat.apply(void 0, _toConsumableArray(result));\n};","map":{"version":3,"sources":["String.tsx"],"names":["concat","Animated","string","values","strings","result"],"mappings":";AAAA,OAAA,QAAA,MAAA,yBAAA;AAEQA,IAAAA,M,GAAWC,Q,CAAXD,MAAAA;AAMR,OAAO,IAAME,MAAM,GAANA,SAAAA,MAAAA,CAAS,OAATA,EAGR;AAAA,OAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EADAC,MACA,GAAA,IAAA,KAAA,CAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AADAA,IAAAA,MACA,CAAA,IAAA,GAAA,CAAA,CADAA,GACA,SAAA,CAAA,IAAA,CADAA;AAEH;;AAAA,MAAIA,MAAM,CAANA,MAAAA,KAAJ,CAAA,EAAyB;AACvB,WAAOH,MAAM,CAACI,OAAO,CAArB,CAAqB,CAAR,CAAb;AAEF;;AAAA,MAAMC,MAAM,GAAGF,MAAM,CAANA,MAAAA,CACb,UAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA;AAAA,WAAA,GAAA,MAAA,CAAA,kBAAA,CAAA,GAAA,CAAA,EAAA,CAA0BC,OAAO,CAAjC,GAAiC,CAAjC,EAAA,CAAA,CAAA,CAAA;AADaD,GAAAA,EAAf,EAAeA,CAAf;AAIAE,EAAAA,MAAM,CAANA,IAAAA,CAAYD,OAAO,CAACA,OAAO,CAAPA,MAAAA,GAApBC,CAAmB,CAAnBA;AACA,SAAOL,MAAM,CAANA,KAAAA,CAAAA,KAAAA,CAAAA,EAAAA,kBAAAA,CAAP,MAAOA,CAAAA,CAAP;AAZK,CAAA","sourcesContent":["import Animated from \"react-native-reanimated\";\n\nconst { concat } = Animated;\n\nexport type Concatable =\n  | Animated.Adaptable<string>\n  | Animated.Adaptable<number>;\n\nexport const string = (\n  strings: readonly string[],\n  ...values: readonly Concatable[]\n) => {\n  if (values.length === 0) {\n    return concat(strings[0]);\n  }\n  const result = values.reduce<Concatable[]>(\n    (acc, v, idx) => [...acc, strings[idx], v],\n    []\n  );\n  result.push(strings[strings.length - 1]);\n  return concat(...result);\n};\n"]},"metadata":{},"sourceType":"module"}