{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/home/circleci/repo/src/ReText.tsx\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport * as React from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated, { useAnimatedProps } from \"react-native-reanimated\";\nimport { TextInput } from \"react-native-gesture-handler\";\nvar styles = StyleSheet.create({\n  baseStyle: {\n    color: \"black\"\n  }\n});\nvar AnimatedTextInput = Animated.createAnimatedComponent(TextInput);\n\nvar ReText = function ReText(props) {\n  var _style$props = _objectSpread({\n    style: {}\n  }, props),\n      text = _style$props.text,\n      style = _style$props.style;\n\n  var animatedProps = useAnimatedProps(function () {\n    return {\n      text: text.value\n    };\n  });\n  return React.createElement(AnimatedTextInput, _extends({\n    underlineColorAndroid: \"transparent\",\n    editable: false,\n    value: text.value,\n    style: [styles.baseStyle, style]\n  }, {\n    animatedProps: animatedProps\n  }, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }));\n};\n\nexport default ReText;","map":{"version":3,"sources":["ReText.tsx"],"names":["styles","StyleSheet","baseStyle","color","AnimatedTextInput","Animated","ReText","text","style","animatedProps","useAnimatedProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;AAEA,OAAA,QAAA,IAAA,gBAAA,QAAA,yBAAA;AACA,SAAA,SAAA,QAAA,8BAAA;AAEA,IAAMA,MAAM,GAAGC,UAAU,CAAVA,MAAAA,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,KAAK,EAFT;AACa;AADoB,CAAlBF,CAAf;AAWA,IAAMG,iBAAiB,GAAGC,QAAQ,CAARA,uBAAAA,CAA1B,SAA0BA,CAA1B;;AACA,IAAMC,MAAM,GAANA,SAAAA,MAAAA,CAAS,KAATA,EAA+B;AAAA,MAAA,YAAA,GAAA,aAAA,CAAA;AACTE,IAAAA,KAAK,EADI;AAAA,GAAA,EAAA,KAAA,CAAA;AAAA,MAC3BD,IAD2B,GAAA,YAAA,CAAA,IAAA;AAAA,MACrBC,KADqB,GAAA,YAAA,CAAA,KAAA;;AAEnC,MAAMC,aAAa,GAAGC,gBAAgB,CAAC,YAAM;AAC3C,WAAO;AACLH,MAAAA,IAAI,EAAEA,IAAI,CADZ;AAAO,KAAP;AADF,GAAsC,CAAtC;AAKA,SACE,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAA,QAAA,CAAA;AACE,IAAA,qBAAqB,EADvB,aAAA;AAEE,IAAA,QAAQ,EAFV,KAAA;AAGE,IAAA,KAAK,EAAEA,IAAI,CAHb,KAAA;AAIE,IAAA,KAAK,EAAE,CAACP,MAAM,CAAP,SAAA,EAJT,KAIS;AAJT,GAAA,EAKM;AAAES,IAAAA,aAAa,EALrB;AAKM,GALN,EAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,EAAA;AAAA,MAAA,YAAA,EADF;AACE;AAAA,GAAA,CAAA,CADF;AAPF,CAAA;;AAkBA,eAAA,MAAA","sourcesContent":["import * as React from \"react\";\nimport { TextStyle, TextProps as RNTextProps, StyleSheet } from \"react-native\";\nimport Animated, { useAnimatedProps } from \"react-native-reanimated\";\nimport { TextInput } from \"react-native-gesture-handler\";\n\nconst styles = StyleSheet.create({\n  baseStyle: {\n    color: \"black\",\n  },\n});\n\ninterface TextProps {\n  text: Animated.SharedValue<string>;\n  style?: Animated.AnimateProps<TextStyle, RNTextProps>[\"style\"];\n}\n\nconst AnimatedTextInput = Animated.createAnimatedComponent(TextInput);\nconst ReText = (props: TextProps) => {\n  const { text, style } = { style: {}, ...props };\n  const animatedProps = useAnimatedProps(() => {\n    return {\n      text: text.value,\n    };\n  });\n  return (\n    <AnimatedTextInput\n      underlineColorAndroid=\"transparent\"\n      editable={false}\n      value={text.value}\n      style={[styles.baseStyle, style]}\n      {...{ animatedProps }}\n    />\n  );\n};\n\nexport default ReText;\n"]},"metadata":{},"sourceType":"module"}