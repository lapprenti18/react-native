{"ast":null,"code":"import { interpolate, Extrapolate, processColor } from \"react-native-reanimated\";\nimport { clamp, mix } from \"./Math\";\nexport var ColorSpace;\n\n(function (ColorSpace) {\n  ColorSpace[ColorSpace[\"RGB\"] = 0] = \"RGB\";\n  ColorSpace[ColorSpace[\"HSV\"] = 1] = \"HSV\";\n})(ColorSpace || (ColorSpace = {}));\n\nvar fract = function fract(v) {\n  \"worklet\";\n\n  return v - Math.floor(v);\n};\n\nexport var opacity = function opacity(c) {\n  \"worklet\";\n\n  return (c >> 24 & 255) / 255;\n};\nexport var red = function red(c) {\n  \"worklet\";\n\n  return c >> 16 & 255;\n};\nexport var green = function green(c) {\n  \"worklet\";\n\n  return c >> 8 & 255;\n};\nexport var blue = function blue(c) {\n  \"worklet\";\n\n  return c & 255;\n};\nexport var color = function color(r, g, b) {\n  \"worklet\";\n\n  var alpha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + alpha + \")\";\n};\nexport var hsv2rgb = function hsv2rgb(h, s, v) {\n  \"worklet\";\n\n  var K = {\n    x: 1,\n    y: 2 / 3,\n    z: 1 / 3,\n    w: 3\n  };\n  var p = {\n    x: Math.abs(fract(h + K.x) * 6 - K.w),\n    y: Math.abs(fract(h + K.y) * 6 - K.w),\n    z: Math.abs(fract(h + K.z) * 6 - K.w)\n  };\n  var rgb = {\n    x: v * mix(s, K.x, clamp(p.x - K.x, 0, 1)),\n    y: v * mix(s, K.x, clamp(p.y - K.x, 0, 1)),\n    z: v * mix(s, K.x, clamp(p.z - K.x, 0, 1))\n  };\n  return {\n    r: Math.round(rgb.x * 255),\n    g: Math.round(rgb.y * 255),\n    b: Math.round(rgb.z * 255)\n  };\n};\nexport var hsv2color = function hsv2color(h, s, v) {\n  \"worklet\";\n\n  var _hsv2rgb = hsv2rgb(h, s, v),\n      r = _hsv2rgb.r,\n      g = _hsv2rgb.g,\n      b = _hsv2rgb.b;\n\n  return color(r, g, b);\n};\nexport var colorForBackground = function colorForBackground(r, g, b) {\n  \"worklet\";\n\n  var L = 0.299 * r + 0.587 * g + 0.114 * b;\n  return L > 186 ? 0x000000ff : 0xffffffff;\n};\n\nvar rgbToHsv = function rgbToHsv(c) {\n  \"worklet\";\n\n  var r = red(c) / 255;\n  var g = green(c) / 255;\n  var b = blue(c) / 255;\n  var ma = Math.max(r, g, b);\n  var mi = Math.min(r, g, b);\n  var h = 0;\n  var v = ma;\n  var d = ma - mi;\n  var s = ma === 0 ? 0 : d / ma;\n\n  if (ma === mi) {\n    h = 0;\n  } else {\n    switch (ma) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n\n      case g:\n        h = (b - r) / d + 2;\n        break;\n\n      case b:\n        h = (r - g) / d + 4;\n        break;\n\n      default:\n    }\n\n    h /= 6;\n  }\n\n  return {\n    h: h,\n    s: s,\n    v: v\n  };\n};\n\nvar interpolateColorsHSV = function interpolateColorsHSV(value, inputRange, colors) {\n  \"worklet\";\n\n  var colorsAsHSV = colors.map(function (c) {\n    return rgbToHsv(c);\n  });\n  var h = interpolate(value, inputRange, colorsAsHSV.map(function (c) {\n    return c.h;\n  }), Extrapolate.CLAMP);\n  var s = interpolate(value, inputRange, colorsAsHSV.map(function (c) {\n    return c.s;\n  }), Extrapolate.CLAMP);\n  var v = interpolate(value, inputRange, colorsAsHSV.map(function (c) {\n    return c.v;\n  }), Extrapolate.CLAMP);\n  return hsv2color(h, s, v);\n};\n\nvar interpolateColorsRGB = function interpolateColorsRGB(value, inputRange, colors) {\n  \"worklet\";\n\n  var r = Math.round(interpolate(value, inputRange, colors.map(function (c) {\n    return red(c);\n  }), Extrapolate.CLAMP));\n  var g = Math.round(interpolate(value, inputRange, colors.map(function (c) {\n    return green(c);\n  }), Extrapolate.CLAMP));\n  var b = Math.round(interpolate(value, inputRange, colors.map(function (c) {\n    return blue(c);\n  }), Extrapolate.CLAMP));\n  var a = interpolate(value, inputRange, colors.map(function (c) {\n    return opacity(c);\n  }), Extrapolate.CLAMP);\n  return color(r, g, b, a);\n};\n\nexport var interpolateColor = function interpolateColor(value, inputRange, rawOutputRange) {\n  \"worklet\";\n\n  var colorSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ColorSpace.RGB;\n  var outputRange = rawOutputRange.map(function (c) {\n    return typeof c === \"number\" ? c : processColor(c);\n  });\n\n  if (colorSpace === ColorSpace.HSV) {\n    return interpolateColorsHSV(value, inputRange, outputRange);\n  }\n\n  var result = interpolateColorsRGB(value, inputRange, outputRange);\n  return result;\n};\nexport var mixColor = function mixColor(value, color1, color2) {\n  \"worklet\";\n\n  var colorSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ColorSpace.RGB;\n  return interpolateColor(value, [0, 1], [color1, color2], colorSpace);\n};","map":{"version":3,"sources":["Colors.ts"],"names":["ColorSpace","fract","v","Math","opacity","c","red","green","blue","color","alpha","hsv2rgb","K","x","y","z","w","p","h","rgb","mix","clamp","r","g","b","hsv2color","colorForBackground","L","rgbToHsv","ma","mi","d","s","interpolateColorsHSV","colorsAsHSV","colors","interpolate","Extrapolate","interpolateColorsRGB","a","interpolateColor","colorSpace","RGB","outputRange","rawOutputRange","processColor","result","mixColor"],"mappings":"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","sourcesContent":["import {\n  interpolate,\n  Extrapolate,\n  processColor,\n} from \"react-native-reanimated\";\n\nimport { clamp, mix } from \"./Math\";\n\n/**\n *  @summary TypeScript type to define an animation value as color.\n *  @example\n    // Color can be of string or number depending of the context in which it was executed\n    const color: Animated.SharedValue<Color> = useDerivedValue(() => mixColor(progress.value, \"blue\", \"red\"));\n */\nexport enum ColorSpace {\n  RGB,\n  HSV,\n}\n\nconst fract = (v: number) => {\n  \"worklet\";\n  return v - Math.floor(v);\n};\n\nexport const opacity = (c: number) => {\n  \"worklet\";\n  return ((c >> 24) & 255) / 255;\n};\n\nexport const red = (c: number) => {\n  \"worklet\";\n  return (c >> 16) & 255;\n};\n\nexport const green = (c: number) => {\n  \"worklet\";\n  return (c >> 8) & 255;\n};\n\nexport const blue = (c: number) => {\n  \"worklet\";\n  return c & 255;\n};\n\nexport const color = (r: number, g: number, b: number, alpha = 1): string => {\n  \"worklet\";\n  return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n};\n\n/**\n * @summary Convert HSV to RGB\n */\nexport const hsv2rgb = (h: number, s: number, v: number) => {\n  \"worklet\";\n  // vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  const K = {\n    x: 1,\n    y: 2 / 3,\n    z: 1 / 3,\n    w: 3,\n  };\n  // vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  const p = {\n    x: Math.abs(fract(h + K.x) * 6 - K.w),\n    y: Math.abs(fract(h + K.y) * 6 - K.w),\n    z: Math.abs(fract(h + K.z) * 6 - K.w),\n  };\n  // return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n  const rgb = {\n    x: v * mix(s, K.x, clamp(p.x - K.x, 0, 1)),\n    y: v * mix(s, K.x, clamp(p.y - K.x, 0, 1)),\n    z: v * mix(s, K.x, clamp(p.z - K.x, 0, 1)),\n  };\n  return {\n    r: Math.round(rgb.x * 255),\n    g: Math.round(rgb.y * 255),\n    b: Math.round(rgb.z * 255),\n  };\n};\n\n/**\n * @summary Convert HSV to RGB\n */\nexport const hsv2color = (h: number, s: number, v: number) => {\n  \"worklet\";\n  const { r, g, b } = hsv2rgb(h, s, v);\n  return color(r, g, b);\n};\n\n/**\n * @summary Returns black or white depending on the value of the background color.\n */\nexport const colorForBackground = (r: number, g: number, b: number) => {\n  \"worklet\";\n  const L = 0.299 * r + 0.587 * g + 0.114 * b;\n  return L > 186 ? 0x000000ff : 0xffffffff;\n};\n\n/**\n * @summary Convert RGB to HSV\n */\nconst rgbToHsv = (c: number) => {\n  \"worklet\";\n  const r = red(c) / 255;\n  const g = green(c) / 255;\n  const b = blue(c) / 255;\n\n  const ma = Math.max(r, g, b);\n  const mi = Math.min(r, g, b);\n  let h = 0;\n  const v = ma;\n\n  const d = ma - mi;\n  const s = ma === 0 ? 0 : d / ma;\n  if (ma === mi) {\n    h = 0; // achromatic\n  } else {\n    switch (ma) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n      default: // do nothing\n    }\n    h /= 6;\n  }\n  return { h, s, v };\n};\n\nconst interpolateColorsHSV = (\n  value: number,\n  inputRange: number[],\n  colors: number[]\n) => {\n  \"worklet\";\n  const colorsAsHSV = colors.map((c) => rgbToHsv(c));\n  const h = interpolate(\n    value,\n    inputRange,\n    colorsAsHSV.map((c) => c.h),\n    Extrapolate.CLAMP\n  );\n  const s = interpolate(\n    value,\n    inputRange,\n    colorsAsHSV.map((c) => c.s),\n    Extrapolate.CLAMP\n  );\n  const v = interpolate(\n    value,\n    inputRange,\n    colorsAsHSV.map((c) => c.v),\n    Extrapolate.CLAMP\n  );\n  return hsv2color(h, s, v);\n};\n\nconst interpolateColorsRGB = (\n  value: number,\n  inputRange: number[],\n  colors: number[]\n) => {\n  \"worklet\";\n  const r = Math.round(\n    interpolate(\n      value,\n      inputRange,\n      colors.map((c) => red(c)),\n      Extrapolate.CLAMP\n    )\n  );\n  const g = Math.round(\n    interpolate(\n      value,\n      inputRange,\n      colors.map((c) => green(c)),\n      Extrapolate.CLAMP\n    )\n  );\n  const b = Math.round(\n    interpolate(\n      value,\n      inputRange,\n      colors.map((c) => blue(c)),\n      Extrapolate.CLAMP\n    )\n  );\n  const a = interpolate(\n    value,\n    inputRange,\n    colors.map((c) => opacity(c)),\n    Extrapolate.CLAMP\n  );\n  return color(r, g, b, a);\n};\n\n/**\n *  @summary Interpolate an animation value into a color.\n    The color can be interpolated in the RGB or HSV color space (default is RGB).\n *  @example\n    const theta = useSharedValue(Math.PI);\n    const backgroundColor = useDerivedValue(() => {\n      return interpolateColor(\n        theta.value,\n        [0, Math.PI, Math.PI * 2],\n        [\"#ff3884\", StyleGuide.palette.primary, \"#38ffb3\"]\n        ColorSpace.HSV // default is RGB\n      );\n    });\n  */\nexport const interpolateColor = (\n  value: number,\n  inputRange: number[],\n  rawOutputRange: string[],\n  colorSpace: ColorSpace = ColorSpace.RGB\n) => {\n  \"worklet\";\n  const outputRange = rawOutputRange.map((c) =>\n    typeof c === \"number\" ? c : processColor(c)\n  );\n  if (colorSpace === ColorSpace.HSV) {\n    return interpolateColorsHSV(value, inputRange, outputRange);\n  }\n  const result = interpolateColorsRGB(value, inputRange, outputRange);\n  return result;\n};\n\n/**\n *  @summary Identical to interpolateColor() but with an animation value that goes from 0 to 1.\n *  @example\n    const backgroundColor = useDerivedValue(() =>\n      mixColor(progress.value, \"#ff3884\", \"#38ffb3\")\n    );\n  */\nexport const mixColor = (\n  value: number,\n  color1: string,\n  color2: string,\n  colorSpace: ColorSpace = ColorSpace.RGB\n) => {\n  \"worklet\";\n  return interpolateColor(value, [0, 1], [color1, color2], colorSpace);\n};\n"]},"metadata":{},"sourceType":"module"}