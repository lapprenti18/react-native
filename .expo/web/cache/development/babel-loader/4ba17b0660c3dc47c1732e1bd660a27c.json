{"ast":null,"code":"import Animated from \"react-native-reanimated\";\nvar eq = Animated.eq,\n    set = Animated.set,\n    cond = Animated.cond,\n    atan = Animated.atan,\n    add = Animated.add,\n    multiply = Animated.multiply,\n    lessThan = Animated.lessThan,\n    abs = Animated.abs,\n    divide = Animated.divide,\n    sub = Animated.sub,\n    min2 = Animated.min,\n    max2 = Animated.max,\n    reRound = Animated.round,\n    greaterThan = Animated.greaterThan,\n    pow = Animated.pow,\n    and = Animated.and,\n    greaterOrEq = Animated.greaterOrEq,\n    lessOrEq = Animated.lessOrEq,\n    proc = Animated.proc,\n    floor = Animated.floor;\nexport var bin = function bin(value) {\n  return value ? 1 : 0;\n};\nexport var fract = function fract(x) {\n  return sub(x, floor(x));\n};\nexport var sign = function sign(x) {\n  return cond(lessThan(x, 0), -1, cond(eq(x, 0), 0, 1));\n};\nexport var min = function min() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return args.reduce(function (acc, arg) {\n    return min2(acc, arg);\n  });\n};\nexport var max = function max() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return args.reduce(function (acc, arg) {\n    return max2(acc, arg);\n  });\n};\nexport var minus = function minus(x) {\n  return multiply(-1, x);\n};\nexport var avg = function avg() {\n  return divide(add.apply(void 0, arguments), arguments.length);\n};\nexport var clamp = proc(function (value, lowerBound, upperBound) {\n  return min2(max2(lowerBound, value), upperBound);\n});\nexport var between = function between(value, lowerBound, upperBound) {\n  var inclusive = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n  if (inclusive) {\n    return and(greaterOrEq(value, lowerBound), lessOrEq(value, upperBound));\n  }\n\n  return and(greaterThan(value, lowerBound), lessThan(value, upperBound));\n};\nexport var approximates = proc(function (a, b) {\n  var precision = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.001;\n  return lessThan(abs(sub(a, b)), precision);\n});\nexport var toRad = proc(function (deg) {\n  return multiply(deg, Math.PI / 180);\n});\nexport var toDeg = proc(function (rad) {\n  return multiply(rad, 180 / Math.PI);\n});\nexport var atan2 = proc(function (y, x) {\n  var a = atan(divide(y, x));\n  var PI = Math.PI;\n  return cond(greaterThan(x, 0), a, cond(and(lessThan(x, 0), greaterOrEq(y, 0)), add(a, PI), cond(and(lessThan(x, 0), lessThan(y, 0)), sub(a, PI), cond(and(eq(x, 0), greaterThan(y, 0)), PI / 2, cond(and(eq(x, 0), lessThan(y, 0)), -PI / 2, 0)))));\n});\nexport var cubicBezier = proc(function (t, p0, p1, p2, p3) {\n  var term = sub(1, t);\n  var a = multiply(1, pow(term, 3), pow(t, 0), p0);\n  var b = multiply(3, pow(term, 2), pow(t, 1), p1);\n  var c = multiply(3, pow(term, 1), pow(t, 2), p2);\n  var d = multiply(1, pow(term, 0), pow(t, 3), p3);\n  return add(a, b, c, d);\n});\nexport var round = proc(function (value) {\n  var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var p = pow(10, precision);\n  return divide(reRound(multiply(value, p)), p);\n});\nexport var inc = proc(function (value) {\n  return set(value, add(value, 1));\n});\nexport var dec = proc(function (value) {\n  return set(value, sub(value, 1));\n});","map":{"version":3,"sources":["Math.ts"],"names":["eq","set","cond","atan","add","multiply","lessThan","abs","divide","sub","min","min2","max","max2","round","reRound","greaterThan","pow","and","greaterOrEq","lessOrEq","proc","floor","Animated","bin","value","fract","sign","args","minus","avg","clamp","between","inclusive","approximates","precision","toRad","Math","toDeg","atan2","a","PI","cubicBezier","term","b","c","d","p","inc","dec"],"mappings":"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","sourcesContent":["import Animated from \"react-native-reanimated\";\n\nconst {\n  eq,\n  set,\n  cond,\n  atan,\n  add,\n  multiply,\n  lessThan,\n  abs,\n  divide,\n  sub,\n  min: min2,\n  max: max2,\n  round: reRound,\n  greaterThan,\n  pow,\n  and,\n  greaterOrEq,\n  lessOrEq,\n  proc,\n  floor,\n} = Animated;\n\nexport const bin = (value: boolean): 0 | 1 => (value ? 1 : 0);\n\nexport const fract = (x: Animated.Adaptable<number>) => sub(x, floor(x));\n\nexport const sign = (x: Animated.Adaptable<number>) =>\n  cond(lessThan(x, 0), -1, cond(eq(x, 0), 0, 1));\n\nexport const min = (...args: Animated.Adaptable<number>[]) =>\n  args.reduce((acc, arg) => min2(acc, arg));\n\nexport const max = (...args: Animated.Adaptable<number>[]) =>\n  args.reduce((acc, arg) => max2(acc, arg));\n\nexport const minus = (x: Animated.Node<number>) => multiply(-1, x);\n\nexport const avg = (\n  ...v: [\n    Animated.Adaptable<number>,\n    Animated.Adaptable<number>,\n    ...Animated.Adaptable<number>[]\n  ]\n) => divide(add(...v), v.length);\n\nexport const clamp = proc(\n  (\n    value: Animated.Adaptable<number>,\n    lowerBound: Animated.Adaptable<number>,\n    upperBound: Animated.Adaptable<number>\n  ): Animated.Node<number> => min2(max2(lowerBound, value), upperBound)\n);\n\nexport const between = (\n  value: Animated.Node<number>,\n  lowerBound: Animated.Adaptable<number>,\n  upperBound: Animated.Adaptable<number>,\n  inclusive = true\n) => {\n  if (inclusive) {\n    return and(greaterOrEq(value, lowerBound), lessOrEq(value, upperBound));\n  }\n  return and(greaterThan(value, lowerBound), lessThan(value, upperBound));\n};\n\nexport const approximates = proc(\n  (\n    a: Animated.Adaptable<number>,\n    b: Animated.Adaptable<number>,\n    precision: Animated.Adaptable<number> = 0.001\n  ) => lessThan(abs(sub(a, b)), precision)\n);\n\nexport const toRad = proc(\n  (deg: Animated.Adaptable<number>): Animated.Node<number> =>\n    multiply(deg, Math.PI / 180)\n);\n\nexport const toDeg = proc(\n  (rad: Animated.Adaptable<number>): Animated.Node<number> =>\n    multiply(rad, 180 / Math.PI)\n);\n\n// https://en.wikipedia.org/wiki/Atan2\n// https://www.gamedev.net/forums/topic/441464-manually-implementing-atan2-or-atan/\n// https://developer.download.nvidia.com/cg/atan2.html\n// https://www.medcalc.org/manual/atan2_function.php\nexport const atan2 = proc(\n  (y: Animated.Adaptable<number>, x: Animated.Adaptable<number>) => {\n    const a = atan(divide(y, x));\n    const { PI } = Math;\n    return cond(\n      greaterThan(x, 0),\n      a,\n      cond(\n        and(lessThan(x, 0), greaterOrEq(y, 0)),\n        add(a, PI),\n        cond(\n          and(lessThan(x, 0), lessThan(y, 0)),\n          sub(a, PI),\n          cond(\n            and(eq(x, 0), greaterThan(y, 0)),\n            PI / 2,\n            cond(and(eq(x, 0), lessThan(y, 0)), -PI / 2, 0)\n          )\n        )\n      )\n    );\n  }\n);\n\nexport const cubicBezier = proc(\n  (\n    t: Animated.Adaptable<number>,\n    p0: Animated.Adaptable<number>,\n    p1: Animated.Adaptable<number>,\n    p2: Animated.Adaptable<number>,\n    p3: Animated.Adaptable<number>\n  ): Animated.Node<number> => {\n    const term = sub(1, t);\n    const a = multiply(1, pow(term, 3), pow(t, 0), p0);\n    const b = multiply(3, pow(term, 2), pow(t, 1), p1);\n    const c = multiply(3, pow(term, 1), pow(t, 2), p2);\n    const d = multiply(1, pow(term, 0), pow(t, 3), p3);\n    return add(a, b, c, d);\n  }\n);\n\nexport const round = proc(\n  (\n    value: Animated.Adaptable<number>,\n    precision: Animated.Adaptable<number> = 0\n  ) => {\n    const p = pow(10, precision);\n    return divide(reRound(multiply(value, p)), p);\n  }\n);\n\nexport const inc = proc((value: Animated.Value<number>) =>\n  set(value, add(value, 1))\n);\n\nexport const dec = proc((value: Animated.Value<number>) =>\n  set(value, sub(value, 1))\n);\n"]},"metadata":{},"sourceType":"module"}