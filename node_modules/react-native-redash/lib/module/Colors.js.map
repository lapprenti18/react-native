{"version":3,"sources":["Colors.ts"],"names":["interpolate","Extrapolate","processColor","clamp","mix","ColorSpace","fract","v","Math","floor","opacity","c","red","green","blue","color","r","g","b","alpha","hsv2rgb","h","s","K","x","y","z","w","p","abs","rgb","round","hsv2color","colorForBackground","L","rgbToHsv","ma","max","mi","min","d","interpolateColorsHSV","value","inputRange","colors","colorsAsHSV","map","CLAMP","interpolateColorsRGB","a","interpolateColor","rawOutputRange","colorSpace","RGB","outputRange","HSV","result","mixColor","color1","color2"],"mappings":"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","sourcesContent":["import {\n  interpolate,\n  Extrapolate,\n  processColor,\n} from \"react-native-reanimated\";\n\nimport { clamp, mix } from \"./Math\";\n\n/**\n *  @summary TypeScript type to define an animation value as color.\n *  @example\n    // Color can be of string or number depending of the context in which it was executed\n    const color: Animated.SharedValue<Color> = useDerivedValue(() => mixColor(progress.value, \"blue\", \"red\"));\n */\nexport enum ColorSpace {\n  RGB,\n  HSV,\n}\n\nconst fract = (v: number) => {\n  \"worklet\";\n  return v - Math.floor(v);\n};\n\nexport const opacity = (c: number) => {\n  \"worklet\";\n  return ((c >> 24) & 255) / 255;\n};\n\nexport const red = (c: number) => {\n  \"worklet\";\n  return (c >> 16) & 255;\n};\n\nexport const green = (c: number) => {\n  \"worklet\";\n  return (c >> 8) & 255;\n};\n\nexport const blue = (c: number) => {\n  \"worklet\";\n  return c & 255;\n};\n\nexport const color = (r: number, g: number, b: number, alpha = 1): string => {\n  \"worklet\";\n  return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n};\n\n/**\n * @summary Convert HSV to RGB\n */\nexport const hsv2rgb = (h: number, s: number, v: number) => {\n  \"worklet\";\n  // vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  const K = {\n    x: 1,\n    y: 2 / 3,\n    z: 1 / 3,\n    w: 3,\n  };\n  // vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  const p = {\n    x: Math.abs(fract(h + K.x) * 6 - K.w),\n    y: Math.abs(fract(h + K.y) * 6 - K.w),\n    z: Math.abs(fract(h + K.z) * 6 - K.w),\n  };\n  // return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n  const rgb = {\n    x: v * mix(s, K.x, clamp(p.x - K.x, 0, 1)),\n    y: v * mix(s, K.x, clamp(p.y - K.x, 0, 1)),\n    z: v * mix(s, K.x, clamp(p.z - K.x, 0, 1)),\n  };\n  return {\n    r: Math.round(rgb.x * 255),\n    g: Math.round(rgb.y * 255),\n    b: Math.round(rgb.z * 255),\n  };\n};\n\n/**\n * @summary Convert HSV to RGB\n */\nexport const hsv2color = (h: number, s: number, v: number) => {\n  \"worklet\";\n  const { r, g, b } = hsv2rgb(h, s, v);\n  return color(r, g, b);\n};\n\n/**\n * @summary Returns black or white depending on the value of the background color.\n */\nexport const colorForBackground = (r: number, g: number, b: number) => {\n  \"worklet\";\n  const L = 0.299 * r + 0.587 * g + 0.114 * b;\n  return L > 186 ? 0x000000ff : 0xffffffff;\n};\n\n/**\n * @summary Convert RGB to HSV\n */\nconst rgbToHsv = (c: number) => {\n  \"worklet\";\n  const r = red(c) / 255;\n  const g = green(c) / 255;\n  const b = blue(c) / 255;\n\n  const ma = Math.max(r, g, b);\n  const mi = Math.min(r, g, b);\n  let h = 0;\n  const v = ma;\n\n  const d = ma - mi;\n  const s = ma === 0 ? 0 : d / ma;\n  if (ma === mi) {\n    h = 0; // achromatic\n  } else {\n    switch (ma) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n      default: // do nothing\n    }\n    h /= 6;\n  }\n  return { h, s, v };\n};\n\nconst interpolateColorsHSV = (\n  value: number,\n  inputRange: number[],\n  colors: number[]\n) => {\n  \"worklet\";\n  const colorsAsHSV = colors.map((c) => rgbToHsv(c));\n  const h = interpolate(\n    value,\n    inputRange,\n    colorsAsHSV.map((c) => c.h),\n    Extrapolate.CLAMP\n  );\n  const s = interpolate(\n    value,\n    inputRange,\n    colorsAsHSV.map((c) => c.s),\n    Extrapolate.CLAMP\n  );\n  const v = interpolate(\n    value,\n    inputRange,\n    colorsAsHSV.map((c) => c.v),\n    Extrapolate.CLAMP\n  );\n  return hsv2color(h, s, v);\n};\n\nconst interpolateColorsRGB = (\n  value: number,\n  inputRange: number[],\n  colors: number[]\n) => {\n  \"worklet\";\n  const r = Math.round(\n    interpolate(\n      value,\n      inputRange,\n      colors.map((c) => red(c)),\n      Extrapolate.CLAMP\n    )\n  );\n  const g = Math.round(\n    interpolate(\n      value,\n      inputRange,\n      colors.map((c) => green(c)),\n      Extrapolate.CLAMP\n    )\n  );\n  const b = Math.round(\n    interpolate(\n      value,\n      inputRange,\n      colors.map((c) => blue(c)),\n      Extrapolate.CLAMP\n    )\n  );\n  const a = interpolate(\n    value,\n    inputRange,\n    colors.map((c) => opacity(c)),\n    Extrapolate.CLAMP\n  );\n  return color(r, g, b, a);\n};\n\n/**\n *  @summary Interpolate an animation value into a color.\n    The color can be interpolated in the RGB or HSV color space (default is RGB).\n *  @example\n    const theta = useSharedValue(Math.PI);\n    const backgroundColor = useDerivedValue(() => {\n      return interpolateColor(\n        theta.value,\n        [0, Math.PI, Math.PI * 2],\n        [\"#ff3884\", StyleGuide.palette.primary, \"#38ffb3\"]\n        ColorSpace.HSV // default is RGB\n      );\n    });\n  */\nexport const interpolateColor = (\n  value: number,\n  inputRange: number[],\n  rawOutputRange: string[],\n  colorSpace: ColorSpace = ColorSpace.RGB\n) => {\n  \"worklet\";\n  const outputRange = rawOutputRange.map((c) =>\n    typeof c === \"number\" ? c : processColor(c)\n  );\n  if (colorSpace === ColorSpace.HSV) {\n    return interpolateColorsHSV(value, inputRange, outputRange);\n  }\n  const result = interpolateColorsRGB(value, inputRange, outputRange);\n  return result;\n};\n\n/**\n *  @summary Identical to interpolateColor() but with an animation value that goes from 0 to 1.\n *  @example\n    const backgroundColor = useDerivedValue(() =>\n      mixColor(progress.value, \"#ff3884\", \"#38ffb3\")\n    );\n  */\nexport const mixColor = (\n  value: number,\n  color1: string,\n  color2: string,\n  colorSpace: ColorSpace = ColorSpace.RGB\n) => {\n  \"worklet\";\n  return interpolateColor(value, [0, 1], [color1, color2], colorSpace);\n};\n"]}